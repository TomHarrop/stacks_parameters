#!/usr/bin/env python3

import collections
import csv
import numpy
import os
import pathlib
import re

#############
# FUNCTIONS #
#############

def select_random_samples(pop_map_file, n):
    '''
    Selects n individual samples from the first column of pop_map, weighted
    by the number of samples per column
    '''
    # read the popmap   
    with open(popmap, 'rt') as csvfile:
        csvreader = csv.reader(csvfile, delimiter='\t')
        samples = []
        populations = []
        for line in csvreader:
            samples.append(line[0])
            populations.append(line[1])
    # count the number of samples per population and the desired probability of
    # selecting an individual from that population
    pop_counts = collections.Counter(populations)
    pop_prob = 1 / len(pop_counts)
    indiv_prob = {x: pop_prob / pop_counts[x] for x in pop_counts}
    # populate the weight for each sample
    sample_weights = {}
    for sample in samples:
        for key in indiv_prob:
            if sample.lower().startswith(key):
                sample_weights[sample] = indiv_prob[key]
    # perform weighted sample choice
    chosen_samples = numpy.random.choice(
        list(sample_weights.keys()),
        size=n,
        p=list(sample_weights.values()))
    # done!
    return list(chosen_samples)

###########
# GLOBALS #
###########

numpy.random.seed(42)

# from config
outdir = config['outdir']
sample_dir = config['samples']
popmap = config['popmap']
max_threads = config['threads']
log_dir = config['log_dir']

#########
# SETUP #
#########

# parse popmap


# find all radtag files specified in the population map
sample_dir_files = list((dirpath, filenames)
    for (dirpath, dirnames, filenames) 
    in os.walk(sample_dir))        
tag_files = []
for dirpath, filenames in sample_dir_files:
    for filename in filenames:
        suffix = ''.join(pathlib.Path(filename).suffixes)
        samplename = re.sub(suffix, '', filename)
        if samplename in samples:
            tag_files.append(os.path.join(dirpath, filename))

# choose three random subsets of 8 samples


#########
# RULES #
#########

rule targets:
    input:
        expand('output/stacks/m{m}/M{M}/n{n}',
               m=[3, 4, 5, 6, 7], M=2, n=1),
        expand('output/stacks/m{m}/M{M}/n{n}',
               m=3, M=[1, 2, 3, 4, 5, 6, 7, 8], n=1),
        expand('output/stacks/m{m}/M{M}/n{n}',
               m=3, M=2, n=[1, 2, 3, 4, 5, 6, 7, 8, 9])

rule stacks:
    input:
        fq = tag_files,
        sample_dir = sample_dir,
        map = popmap
    output:
        tmpfile = temp(touch('output/stacks/m{m}/M{M}/n{n}/tmp')),
        dir = 'output/stacks/m{m}/M{M}/n{n}'
    threads:
        max_threads
    log:
        os.path.join(log_dir, 'stacks_m{m}_M{M}_n{n}.log')
    shell:
        'bin/denovo_map.pl '
        '--samples {input.sample_dir} '
        '--popmap {input.map} '
        '-T {threads} '
        '-o {output.dir} '
        '-m {wildcards.m} '
        '-M {wildcards.M} '
        '-n {wildcards.n} '
        '&> {log} '
