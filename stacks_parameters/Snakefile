#!/usr/bin/env python3

import csv
import os
import pathlib
import re

#############
# FUNCTIONS #
#############

def stacks_input_files(wildcards):
    pass



###########
# GLOBALS #
###########

# from config
outdir = config['outdir']
sample_dir = config['samples']
popmap = config['popmap']
max_threads = config['threads']
log_dir = config['log_dir']

#########
# SETUP #
#########

# parse popmap
with open(popmap, 'rt') as csvfile:
    csvreader = csv.reader(csvfile, delimiter='\t')
    samples = list(x[0] for x in csvreader)

# find all radtag files specified in the population map
sample_dir_files = list((dirpath, filenames)
    for (dirpath, dirnames, filenames) 
    in os.walk(sample_dir))        
tag_files = []
for dirpath, filenames in sample_dir_files:
    for filename in filenames:
        suffix = ''.join(pathlib.Path(filename).suffixes)
        samplename = re.sub(suffix, '', filename)
        if samplename in samples:
            tag_files.append(os.path.join(dirpath, filename))

print(tag_files)

#########
# RULES #
#########

rule targets:
    input:
        expand('output/stacks/m{m}/M{M}/n{n}',
               m=[3, 4, 5, 6, 7], M=2, n=1),
        expand('output/stacks/m{m}/M{M}/n{n}',
               m=3, M=[1, 2, 3, 4, 5, 6, 7, 8], n=1),
        expand('output/stacks/m{m}/M{M}/n{n}',
               m=3, M=2, n=[1, 2, 3, 4, 5, 6, 7, 8, 9])

rule stacks:
    input:
        fq = tag_files,
        sample_dir = sample_dir,
        map = popmap
    output:
        tmpfile = temp(touch('output/stacks/m{m}/M{M}/n{n}/tmp')),
        dir = 'output/stacks/m{m}/M{M}/n{n}'
    threads:
        max_threads
    log:
        os.path.join(log_dir, 'stacks_m{m}_M{M}_n{n}.log')
    shell:
        'echo \''
        'bin/denovo_map.pl '
        '--samples={input.sample_dir} '
        '--popmap={input.map} '
        '-T {threads} '
        '-o {output.dir} '
        '-m {wildcards.m} '
        '-M {wildcards.M} '
        '-n {wildcards.n} '
        '&> {log} '
        '\''
