#!/usr/bin/env python3

import collections
import csv
import numpy
import os
import pathlib
import re
import shutil

#############
# FUNCTIONS #
#############

def get_full_path(binary):
    which = shutil.which(binary)
    # check if the binary exists
    if not which:
        raise EnvironmentError(
            'Dependency {0} not found in $PATH'.format(binary))
    # get the full path to binary
    binary_path = pathlib.Path(which).resolve()
    return str(binary_path)


def select_random_samples(pop_map_file,
                          n,
                          seed=42):
    '''
    Selects n individual samples from the first column of pop_map_file,
    weighted by the number of samples per population
    '''
    # read the popmap
    with open(pop_map_file, 'rt') as csvfile:
        csvreader = csv.reader(csvfile, delimiter='\t')
        my_samples = []
        my_populations = []
        for line in csvreader:
            my_samples.append(line[0])
            my_populations.append(line[1])
    # count the number of samples per population and the desired probability of
    # selecting an individual from that population
    pop_counts = collections.Counter(my_populations)
    pop_prob = 1 / len(pop_counts)
    indiv_prob = {x: pop_prob / pop_counts[x] for x in pop_counts}
    # populate the weight for each sample
    sample_weights = {}
    for sample in my_samples:
        for key in indiv_prob.keys():
            if sample.lower().startswith(key.lower()):
                sample_weights[sample] = indiv_prob[key]
    # perform weighted sample choice
    r = numpy.random.RandomState(seed)
    chosen_samples = r.choice(
        list(sample_weights.keys()),
        size=n,
        p=list(x / sum(sample_weights.values())
               for x in sample_weights.values()),
        replace=False)
    # done!
    return list(chosen_samples)


###########
# GLOBALS #
###########

# sampling parameters
replicate_n = config['replicates']
rep_range = list(numpy.arange(1, replicate_n + 1))
sample_n = config['individuals']

# from config
outdir = config['outdir']
sample_dir = config['samples']
popmap = config['popmap']
max_threads = config['threads']
log_dir = config['log_dir']


#########
# SETUP #
#########

# read the popmap
with open(popmap, 'rt') as csvfile:
    csvreader = csv.reader(csvfile, delimiter='\t')
    samples = list(x[0] for x in csvreader)

# find all radtag files specified in the population map
sample_dir_files = list((dirpath, filenames)
                        for (dirpath, dirnames, filenames)
                        in os.walk(sample_dir))
tag_files = []
for dirpath, filenames in sample_dir_files:
    for filename in filenames:
        suffix = ''.join(pathlib.Path(filename).suffixes)
        samplename = re.sub(suffix, '', filename)
        if samplename in samples:
            tag_files.append(os.path.join(dirpath, filename))


#######################
# mode == setup RULES #
#######################

# filter the samples with not many reads
rule count_reads:
    input:
        tag_files = tag_files
    output:
        os.path.join(outdir, 'filtering/stats.txt')
    log:
        os.path.join(log_dir, 'statswrapper.log')
    run:
        in_line = ','.join(input.tag_files)
        my_statswrapper = get_full_path('statswrapper.sh')
        shell('{my_statswrapper} '
              'in={in_line} '
              'out={output} '
              '2> {log}')
rule filter_samples:
    input:
        stats = os.path.join(outdir, 'filtering/stats.txt'),
        popmap = popmap
    params:
        sample_dir = sample_dir,
    output:
        map = os.path.join(outdir, 'filtering/populations.txt'),
        plot = os.path.join(outdir, 'filtering/read_count_histogram.pdf')
    script:
        get_full_path('filter_populations_map.R')

rule subset_samples:
    input:
        popmap = os.path.join(outdir, 'filtering/populations.txt')
    output:
        expand(
            os.path.join(outdir, 'filtering/replicate_{rep}_popmap.txt'),
            rep=rep_range)
    run:
        rep_samples = select_random_samples(
            pop_map_file=input.popmap,
            n=sample_n * replicate_n,
            seed=42)
        sample_split = numpy.array_split(rep_samples, replicate_n)
        for i in range(0, replicate_n):
            with open(output[i], 'wt') as f:
                for x in sample_split[i]:
                    f.write('{0}\tReplicate{1}\n'.format(x, str(i + 1)))

##########################
# mode == optim_Mm RULES #
##########################

if 'optim_Mm' in config['targets']:

    rule optim_Mm:
        input:
            os.path.join(
                outdir,
                'stats_Mm/samplestats_combined.csv'),
            os.path.join(
                outdir,
                'stats_Mm/popstats_combined.csv'),
            os.path.join(
                outdir,
                'stats_Mm/covstats_combined.csv'),
            os.path.join(
                outdir,
                'stats_Mm/coverage_vs_m.pdf'),
            os.path.join(
                outdir,
                'stats_Mm/loci_vs_M.pdf'),
            os.path.join(
                outdir,
                'stats_Mm/loci_vs_m.pdf')


    # get stats from the stacks runs
    rule stacks_Mm_cov_stats:
        input:
            dm_log = os.path.join(
                outdir,
                'stacks/m{m}/M{M}/n{n}/rep{rep}/denovo_map.log')
        threads:
            1
        output:
            coverage_stats = os.path.join(
                outdir,
                'run_stats/m{m}_M{M}_n{n}_rep{rep}_coverage.csv')
        script:
            get_full_path('parse_denovo_map_logs.py')

    rule stacks_Mm_sample_stats:
        input:
            populations_sumstats = os.path.join(
                outdir,
                'stacks/m{m}/M{M}/n{n}/rep{rep}/populations.sumstats.tsv'),
            map = os.path.join(outdir, 'filtering/replicate_{rep}_popmap.txt')
        params:
            stats_dir = os.path.join(
                outdir,
                'stacks/m{m}/M{M}/n{n}/rep{rep}')
        threads:
            1
        output:
            pop_stats = os.path.join(
                outdir,
                'run_stats/m{m}_M{M}_n{n}_rep{rep}_popstats.csv'),
            sample_stats = os.path.join(
                outdir,
                'run_stats/m{m}_M{M}_n{n}_rep{rep}_samplestats.csv')
        log:
            log = os.path.join(
                log_dir,
                'parse_stacks_output_m{m}_M{M}_n{n}_rep{rep}.log')
        script:
            get_full_path('parse_stacks_output.R')


    rule stacks_Mm_combine_pop:
        input:
            expand(
                os.path.join(
                    outdir,
                    'run_stats/m{m}_M{M}_n{n}_rep{rep}_popstats.csv'),
                m=[3, 4, 5, 6, 7],
                M=2,
                n=1,
                rep=rep_range),
            expand(
                os.path.join(
                    outdir,
                    'run_stats/m{m}_M{M}_n{n}_rep{rep}_popstats.csv'),
                m=3,
                M=[1, 2, 3, 4, 5, 6, 7, 8],
                n=1,
                rep=rep_range)
        output:
            combined = os.path.join(
                outdir,
                'stats_Mm/popstats_combined.csv')
        script:
            get_full_path('combine_stacks_data.R')

    rule stacks_Mm_combine_cov:
        input:
            expand(
                os.path.join(
                    outdir,
                    'run_stats/m{m}_M{M}_n{n}_rep{rep}_coverage.csv'),
                m=[3, 4, 5, 6, 7],
                M=2,
                n=1,
                rep=rep_range),
            expand(
                os.path.join(
                    outdir,
                    'run_stats/m{m}_M{M}_n{n}_rep{rep}_coverage.csv'),
                m=3,
                M=[1, 2, 3, 4, 5, 6, 7, 8],
                n=1,
                rep=rep_range)
        output:
            combined = os.path.join(
                outdir,
                'stats_Mm/covstats_combined.csv')
        script:
            get_full_path('combine_stacks_data.R')

    rule stacks_Mm_combine_sample:
        input:
            expand(
                os.path.join(
                    outdir,
                    'run_stats/m{m}_M{M}_n{n}_rep{rep}_samplestats.csv'),
                m=[3, 4, 5, 6, 7],
                M=2,
                n=1,
                rep=rep_range),
            expand(
                os.path.join(
                    outdir,
                    'run_stats/m{m}_M{M}_n{n}_rep{rep}_samplestats.csv'),
                m=3,
                M=[1, 2, 3, 4, 5, 6, 7, 8],
                n=1,
                rep=rep_range)
        output:
            combined = os.path.join(
                outdir,
                'stats_Mm/samplestats_combined.csv')
        script:
            get_full_path('combine_stacks_data.R')

    rule Mm_plot_coverage:
        input:
            covstats = os.path.join(
                outdir,
                'stats_Mm/covstats_combined.csv')
        output:
            pdf = os.path.join(
                outdir,
                'stats_Mm/coverage_vs_m.pdf')
        script:
            get_full_path('plot_coverage.R')        

    rule Mm_plot_loci:
        input:
            popstats = os.path.join(
                outdir,
                'stats_Mm/popstats_combined.csv'),
            samplestats = os.path.join(
                outdir,
                'stats_Mm/samplestats_combined.csv')
        output:
            M = os.path.join(
                outdir,
                'stats_Mm/loci_vs_M.pdf'),
            m = os.path.join(
                outdir,
                'stats_Mm/loci_vs_m.pdf')
        script:
            get_full_path('plot_stacks_output.R')        

#########################
# mode == optim_n RULES #
#########################

if 'optim_n' in config['targets']:
    rule optim_n:
        input:
            os.path.join(
                outdir,
                'stats_n/samplestats_combined.csv'),
            os.path.join(
                outdir,
                'stats_n/popstats_combined.csv'),
            os.path.join(
                outdir,
                'stats_n/covstats_combined.csv'),
            os.path.join(
                outdir,
                'stats_n/loci_vs_n.pdf')

    rule stacks_n_cov_stats:
        input:
            dm_log = os.path.join(
                outdir,
                'stacks/m{m}/M{M}/n{n}/rep{rep}/denovo_map.log')
        threads:
            1
        output:
            coverage_stats = os.path.join(
                outdir,
                'run_stats/m{m}_M{M}_n{n}_rep{rep}_coverage.csv')
        script:
            get_full_path('parse_denovo_map_logs.py')

    rule stacks_n_sample_stats:
        input:
            populations_sumstats = os.path.join(
                outdir,
                'stacks/m{m}/M{M}/n{n}/rep{rep}/populations.sumstats.tsv'),
            map = os.path.join(outdir, 'filtering/replicate_{rep}_popmap.txt')
        params:
            stats_dir = os.path.join(
                outdir,
                'stacks/m{m}/M{M}/n{n}/rep{rep}')
        threads:
            1
        output:
            pop_stats = os.path.join(
                outdir,
                'run_stats/m{m}_M{M}_n{n}_rep{rep}_popstats.csv'),
            sample_stats = os.path.join(
                outdir,
                'run_stats/m{m}_M{M}_n{n}_rep{rep}_samplestats.csv')
        log:
            log = os.path.join(
                log_dir,
                'parse_stacks_output_m{m}_M{M}_n{n}_rep{rep}.log')
        script:
            get_full_path('parse_stacks_output.R')

    rule stacks_n_combine_pop:
        input:
            expand(
                os.path.join(outdir,
                             'run_stats/m{m}_M{M}_n{n}_rep{rep}_popstats.csv'),
                m=config['m'],
                M=config['M'],
                n=list(set(['1',
                            str(int(config['M']) - 1),
                            config['M'],
                            str(int(config['M']) + 1)])),
                rep=rep_range),
            expand(
                os.path.join(outdir,
                             'run_stats/m{m}_M{M}_n{n}_rep{rep}_popstats.csv'),
                m=config['m'],
                M=config['M'],
                n=list(set(['1',
                            str(int(config['M']) - 1),
                            config['M'],
                            str(int(config['M']) + 1)])),
                rep=rep_range)
        output:
            combined = os.path.join(
                outdir,
                'stats_n/popstats_combined.csv')
        script:
            get_full_path('combine_stacks_data.R')

    rule stacks_n_combine_cov:
        input:
            expand(
                os.path.join(outdir,
                             'run_stats/m{m}_M{M}_n{n}_rep{rep}_coverage.csv'),
                m=config['m'],
                M=config['M'],
                n=list(set(['1',
                            str(int(config['M']) - 1),
                            config['M'],
                            str(int(config['M']) + 1)])),
                rep=rep_range),
            expand(
                os.path.join(outdir,
                             'run_stats/m{m}_M{M}_n{n}_rep{rep}_coverage.csv'),
                m=config['m'],
                M=config['M'],
                n=list(set(['1',
                            str(int(config['M']) - 1),
                            config['M'],
                            str(int(config['M']) + 1)])),
                rep=rep_range)
        output:
            combined = os.path.join(
                outdir,
                'stats_n/covstats_combined.csv')
        script:
            get_full_path('combine_stacks_data.R')

    rule stacks_n_combine_sample:
        input:
            expand(
                os.path.join(
                    outdir,
                    'run_stats/m{m}_M{M}_n{n}_rep{rep}_samplestats.csv'),
                m=config['m'],
                M=config['M'],
                n=list(set(['1',
                            str(int(config['M']) - 1),
                            config['M'],
                            str(int(config['M']) + 1)])),
                rep=rep_range),
            expand(
                os.path.join(
                    outdir,
                    'run_stats/m{m}_M{M}_n{n}_rep{rep}_samplestats.csv'),
                m=config['m'],
                M=config['M'],
                n=list(set(['1',
                            str(int(config['M']) - 1),
                            config['M'],
                            str(int(config['M']) + 1)])),
                rep=rep_range)
        output:
            combined = os.path.join(
                outdir,
                'stats_n/samplestats_combined.csv')
        script:
            get_full_path('combine_stacks_data.R')

    rule n_plot_loci:
        input:
            popstats = os.path.join(
                outdir,
                'stats_n/popstats_combined.csv'),
            samplestats = os.path.join(
                outdir,
                'stats_n/samplestats_combined.csv')
        params:
            M = 'M{0}'.format(config['M']),
            m = 'm{0}'.format(config['m'])
        output:
            n = os.path.join(
                outdir,
                'stats_n/loci_vs_n.pdf')
        script:
            get_full_path('plot_optim_n_output.R')

####################
# COMPARE DEFAULTS #
####################

if 'compare_defaults' in config['targets']:
    rule compare_defaults:
        input:
            os.path.join(
                outdir,
                'compare_defaults/stats_plot.pdf'),
            os.path.join(
                outdir,
                'compare_defaults/coverage_plot.pdf')

    # combine results into "default" and "optimised" files
    rule combine_default_coverage:
        input:
            expand(
                os.path.join(
                    outdir,
                    'run_stats/m3_M2_n1_rep{rep}_coverage.csv'),
                rep=rep_range),
        output:
            combined = os.path.join(
                outdir,
                'compare_defaults/default_covstats_combined.csv')
        script:
            get_full_path('combine_stacks_data.R')

    rule combine_default_popstats:
        input:
            expand(
                os.path.join(
                    outdir,
                    'run_stats/m3_M2_n1_rep{rep}_popstats.csv'),
                rep=rep_range),
        output:
            combined = os.path.join(
                outdir,
                'compare_defaults/default_popstats_combined.csv')
        script:
            get_full_path('combine_stacks_data.R')

    rule combine_default_samplestats:
        input:
            expand(
                os.path.join(
                    outdir,
                    'run_stats/m3_M2_n1_rep{rep}_samplestats.csv'),
                rep=rep_range),
        output:
            combined = os.path.join(
                outdir,
                'compare_defaults/default_samplestats_combined.csv')
        script:
            get_full_path('combine_stacks_data.R')

    rule combine_optimised_coverage:
        input:
            expand(
                os.path.join(
                    outdir,
                    'run_stats/m{m}_M{m}_n{n}_rep{rep}_coverage.csv'),
                m=config['m'],
                M=config['M'],
                n=config['n'],
                rep=rep_range),
        output:
            combined = os.path.join(
                outdir,
                'compare_defaults/optimised_covstats_combined.csv')
        script:
            get_full_path('combine_stacks_data.R')

    rule combine_optimised_popstats:
        input:
            expand(
                os.path.join(
                    outdir,
                    'run_stats/m{m}_M{m}_n{n}_rep{rep}_popstats.csv'),
                m=config['m'],
                M=config['M'],
                n=config['n'],
                rep=rep_range),
        output:
            combined = os.path.join(
                outdir,
                'compare_defaults/optimised_popstats_combined.csv')
        script:
            get_full_path('combine_stacks_data.R')

    rule combine_optimised_samplestats:
        input:
            expand(
                os.path.join(
                    outdir,
                    'run_stats/m{m}_M{m}_n{n}_rep{rep}_samplestats.csv'),
                m=config['m'],
                M=config['M'],
                n=config['n'],
                rep=rep_range),
        output:
            combined = os.path.join(
                outdir,
                'compare_defaults/optimised_samplestats_combined.csv')
        script:
            get_full_path('combine_stacks_data.R')

    # run plots on combined files
    rule plot_compare_defaults:
        input:
            popstats_default = os.path.join(
                outdir,
                'compare_defaults/default_popstats_combined.csv'),
            covstats_default = os.path.join(
                outdir,
                'compare_defaults/default_covstats_combined.csv'),
            samplestats_default = os.path.join(
                outdir,
                'compare_defaults/default_samplestats_combined.csv'),
            popstats_optimised = os.path.join(
                outdir,
                'compare_defaults/optimised_popstats_combined.csv'),
            covstats_optimised = os.path.join(
                outdir,
                'compare_defaults/optimised_covstats_combined.csv'),
            samplestats_optimised = os.path.join(
                outdir,
                'compare_defaults/optimised_samplestats_combined.csv')
        output:
            stats_plot = os.path.join(
                outdir,
                'compare_defaults/stats_plot.pdf'),
            coverage_plot = os.path.join(
                outdir,
                'compare_defaults/coverage_plot.pdf')
        script:
            get_full_path('plot_compare_defaults.R')


################
# SHARED RULES #
################

# run stacks
rule stacks:
    input:
        fq = tag_files,
        sample_dir = sample_dir,
        map = os.path.join(outdir, 'filtering/replicate_{rep}_popmap.txt')
    output:
        populations_sumstats = os.path.join(
            outdir,
            'stacks/m{m}/M{M}/n{n}/rep{rep}/populations.sumstats.tsv'),
        populations_haplotypes = os.path.join(
            outdir,
            'stacks/m{m}/M{M}/n{n}/rep{rep}/populations.haplotypes.tsv'),
        dm_log = os.path.join(
            outdir,
            'stacks/m{m}/M{M}/n{n}/rep{rep}/denovo_map.log'),
        pop_log = os.path.join(
            outdir,
            'stacks/m{m}/M{M}/n{n}/rep{rep}/populations.log')
    params:
        wd = 'output/stacks/m{m}/M{M}/n{n}/rep{rep}'
    threads:
        sample_n
    log:
        os.path.join(log_dir, 'stacks_m{m}_M{M}_n{n}_rep{rep}.log')
    shell:
        'bin/denovo_map.pl '
        '--samples {input.sample_dir} '
        '--popmap {input.map} '
        '-T {threads} '
        '-o {params.wd} '
        '-m {wildcards.m} '
        '-M {wildcards.M} '
        '-n {wildcards.n} '
        '-X "populations:-r 0.8"'
        '&> {log} '
