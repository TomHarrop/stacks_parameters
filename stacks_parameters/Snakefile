#!/usr/bin/env python3

import collections
import csv
import numpy
import os
import pathlib
import re
import shutil

#############
# FUNCTIONS #
#############

def get_full_path(binary):
    which = shutil.which(binary)
    # check if the binary exists
    if not which:
        raise EnvironmentError(
            'Dependency {0} not found in $PATH'.format(binary))
    # get the full path to binary
    binary_path = pathlib.Path(which).resolve()
    return str(binary_path)


def select_random_samples(pop_map_file, n):
    '''
    Selects n individual samples from the first column of pop_map_file,
    weighted by the number of samples per population
    '''
    # read the popmap
    with open(pop_map_file, 'rt') as csvfile:
        csvreader = csv.reader(csvfile, delimiter='\t')
        my_samples = []
        my_populations = []
        for line in csvreader:
            my_samples.append(line[0])
            my_populations.append(line[1])
    # count the number of samples per population and the desired probability of
    # selecting an individual from that population
    pop_counts = collections.Counter(my_populations)
    pop_prob = 1 / len(pop_counts)
    indiv_prob = {x: pop_prob / pop_counts[x] for x in pop_counts}
    # populate the weight for each sample
    sample_weights = {}
    for sample in my_samples:
        for key in indiv_prob:
            if sample.lower().startswith(key):
                sample_weights[sample] = indiv_prob[key]
    # perform weighted sample choice
    chosen_samples = numpy.random.choice(
        list(sample_weights.keys()),
        size=n,
        p=list(sample_weights.values()))
    # done!
    return list(chosen_samples)


###########
# GLOBALS #
###########

numpy.random.seed(42)

# sampling parameters
replicate_n = 3
rep_range = numpy.arange(1, replicate_n + 1)
sample_n = 8

# from config
outdir = config['outdir']
sample_dir = config['samples']
popmap = config['popmap']
max_threads = config['threads']
log_dir = config['log_dir']


#########
# SETUP #
#########

# read the popmap
with open(popmap, 'rt') as csvfile:
    csvreader = csv.reader(csvfile, delimiter='\t')
    samples = list(x[0] for x in csvreader)

# find all radtag files specified in the population map
sample_dir_files = list((dirpath, filenames)
                        for (dirpath, dirnames, filenames)
                        in os.walk(sample_dir))
tag_files = []
for dirpath, filenames in sample_dir_files:
    for filename in filenames:
        suffix = ''.join(pathlib.Path(filename).suffixes)
        samplename = re.sub(suffix, '', filename)
        if samplename in samples:
            tag_files.append(os.path.join(dirpath, filename))


#########
# RULES #
#########

rule targets:
    input:
        expand('output/stacks/m{m}/M{M}/n{n}/rep{rep}/denovo_map.log',
               m=[3, 4, 5, 6, 7],
               M=2,
               n=1,
               rep=rep_range),
        expand('output/stacks/m{m}/M{M}/n{n}/rep{rep}/denovo_map.log',
               m=3,
               M=[1, 2, 3, 4, 5, 6, 7, 8],
               n=1,
               rep=rep_range),
        expand('output/stacks/m{m}/M{M}/n{n}/rep{rep}/denovo_map.log',
               m=3,
               M=2,
               n=[1, 2, 3, 4, 5, 6, 7, 8, 9],
               rep=rep_range)

# filter the samples with not many reads
rule count_reads:
    input:
        tag_files = tag_files
    output:
        os.path.join(outdir, 'filtering/stats.txt')
    log:
        os.path.join(log_dir, 'statswrapper.log')
    run:
        in_line = ','.join(input.tag_files)
        shell('statswrapper.sh '
              'in={in_line} '
              'out={output} '
              '2> {log}')
rule filter_samples:
    input:
        stats = os.path.join(outdir, 'filtering/stats.txt'),
        popmap = popmap
    params:
        sample_dir = sample_dir,
    output:
        map = os.path.join(outdir, 'filtering/populations.txt')
    script:
        get_full_path('filter_populations_map.R')

# random subsets
rule subset_samples:
    input:
        popmap = os.path.join(outdir, 'filtering/populations.txt')
    output:
        popmap = os.path.join(outdir, 'filtering/replicate_{rep}_popmap.txt')
    run:
        rep_samples = select_random_samples(input.popmap, sample_n)
        with open(output.popmap, 'wt') as f:
            for x in rep_samples:
                f.write('{0}\tReplicate{1}\n'.format(x, wildcards.rep))

# run stacks
rule stacks:
    input:
        fq = tag_files,
        sample_dir = sample_dir,
        map = os.path.join(outdir, 'filtering/replicate_{rep}_popmap.txt')
    output:
        logfile = 'output/stacks/m{m}/M{M}/n{n}/rep{rep}/denovo_map.log'
    params:
        wd = 'output/stacks/m{m}/M{M}/n{n}/rep{rep}'
    threads:
        max_threads
    log:
        os.path.join(log_dir, 'stacks_m{m}_M{M}_n{n}_rep{rep}.log')
    shell:
        'bin/denovo_map.pl '
        '--samples {input.sample_dir} '
        '--popmap {input.map} '
        '-T {threads} '
        '-o {params.wd} '
        '-m {wildcards.m} '
        '-M {wildcards.M} '
        '-n {wildcards.n} '
        '&> {log} '
